plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
}

group = 'com.dev'
version = '1.0-BETA'

libsDirName = '../../../Desktop/Server/Test Server 1.19.4/plugins'

repositories {
    mavenCentral()
    maven {
        name = 'spigot-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "phoenix"
        url = "https://nexus.phoenixdevt.fr/repository/maven-public/"
    }
    maven {
        name = "nbt-api"
        url = 'https://repo.codemc.org/repository/maven-public/'
    }
    maven {
        name = "nexus"
        url = "https://mvn.lumine.io/repository/maven-public/"
    }
    maven {
        name = "placeholder-api"
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    maven {
        name = "protocolLibs"
        url "https://repo.dmulloy2.net/repository/public/"
    }
    maven {
        name = "holographic-display"
        url "https://repo.codemc.io/repository/maven-public/"
    }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:1.19.4-R0.1-SNAPSHOT"
    compileOnly "io.lumine:MythicLib-dist:1.5.2-SNAPSHOT"
    compileOnly "net.Indyuce:MMOItems-API:6.9.2-SNAPSHOT"
    compileOnly "net.Indyuce:MMOCore-API:1.11.3-SNAPSHOT"
    compileOnly "io.lumine:Mythic-Dist:5.2.1"
    compileOnly "me.clip:placeholderapi:2.11.3"
    implementation "de.tr7zw:item-nbt-api-plugin:2.11.2"
    compileOnly group: "com.comphenix.protocol", name: "ProtocolLib", version: "5.0.0";
    compileOnly 'me.filoghost.holographicdisplays:holographicdisplays-api:3.0.0'
}

shadowJar {
    dependencies {
        include(dependency("de.tr7zw:item-nbt-api-plugin:2.11.2"))
    }
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
